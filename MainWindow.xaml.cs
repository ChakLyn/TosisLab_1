using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.ComponentModel;

using TosisLab_1.Infrastructure;
using TosisLab_1.Core;

namespace TosisLab_1
{

    public partial class MainWindow : Window
    {
        
        private BindingList<DiscPair> _dicsList;

        private double MtTeor;
        private double DtTeor;

        private double MtPr;
        private double DtPr;

        public MainWindow()
        {
            InitializeComponent();

            _dicsList = new BindingList<DiscPair>();

            DiscTable.ItemsSource = _dicsList;

            _dicsList.Add(new DiscPair(5, 0.1));
            _dicsList.Add(new DiscPair(2, 0.2));
            _dicsList.Add(new DiscPair(4, 0.5));
            _dicsList.Add(new DiscPair(7, 0.2));
        }

        
        private void TabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (TUniDistr.IsSelected)
            {
                BGenerate.Command = UniDistr;
            }
            if (TExpDistr.IsSelected)
            {
                MessageBox.Show("Параметр лямбда должен быть больше 0.", "Напоминание", MessageBoxButton.OK, MessageBoxImage.Information);
                BGenerate.Command = ExpDistr;
            }
            if (TNormalDistr.IsSelected)
            {
                MessageBox.Show("Параметр сигма должен быть больше или равен 0.", "Напоминание", MessageBoxButton.OK, MessageBoxImage.Information);
                BGenerate.Command = NormDistr;
            }
            if (TTrinDistr.IsSelected)
            {
                BGenerate.Command = TringDistr;
            }
            if (TDiscDistr.IsSelected)
            {
                MessageBox.Show("Сумма вероятностей Pi должна равнятся 1.", "Напоминание", MessageBoxButton.OK, MessageBoxImage.Information);
                BGenerate.Command = DiscDistr;
            }
            ClearTextBoxes();
        }        

        private void ClearTextBoxes()
        {
            TbAlfaParam.Text = "";
            TbAlfaTrigParam.Text = "";
            TbAParam.Text = "";
            TbBParam.Text = "";
            TbDtPr.Text = "";
            TbDtTr.Text = "";
            TbLamdaParam.Text = "";
            TbMtPr.Text = "";
            TbMtTr.Text = "";
            TbN.Text = "";
            TbSigmParam.Text = "";
        }

        private void c_dataGridScrollViewer_Loaded(object sender, RoutedEventArgs e)
        {
            // Add MouseWheel support for the datagrid scrollviewer.
            DiscTable.AddHandler(MouseWheelEvent, new RoutedEventHandler(DataGridMouseWheelHorizontal), true);
        }

        private void DataGridMouseWheelHorizontal(object sender, RoutedEventArgs e)
        {
            MouseWheelEventArgs eargs = (MouseWheelEventArgs)e;
            double x = (double)eargs.Delta;
            double y = c_dataGridScrollViewer.VerticalOffset;
            c_dataGridScrollViewer.ScrollToVerticalOffset(y - x);
        }

        // for horisontal dataGrid
        private void c_dataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            TransformGroup transformGroup = new TransformGroup();
            transformGroup.Children.Add(new RotateTransform(90));
            foreach (DataGridColumn dataGridColumn in DiscTable.Columns)
            {
                if (dataGridColumn is DataGridTextColumn)
                {
                    DataGridTextColumn dataGridTextColumn = dataGridColumn as DataGridTextColumn;

                    Style style = new Style(dataGridTextColumn.ElementStyle.TargetType, dataGridTextColumn.ElementStyle.BasedOn);
                    style.Setters.Add(new Setter(TextBlock.MarginProperty, new Thickness(0, 2, 0, 2)));
                    style.Setters.Add(new Setter(TextBlock.LayoutTransformProperty, transformGroup));
                    style.Setters.Add(new Setter(TextBlock.HorizontalAlignmentProperty, HorizontalAlignment.Center));

                    Style editingStyle = new Style(dataGridTextColumn.EditingElementStyle.TargetType, dataGridTextColumn.EditingElementStyle.BasedOn);
                    editingStyle.Setters.Add(new Setter(TextBox.MarginProperty, new Thickness(0, 2, 0, 2)));
                    editingStyle.Setters.Add(new Setter(TextBox.LayoutTransformProperty, transformGroup));
                    editingStyle.Setters.Add(new Setter(TextBox.HorizontalAlignmentProperty, HorizontalAlignment.Center));

                    dataGridTextColumn.ElementStyle = style;
                    dataGridTextColumn.EditingElementStyle = editingStyle;
                }
            }
            List<DataGridColumn> dataGridColumns = new List<DataGridColumn>();
            foreach (DataGridColumn dataGridColumn in DiscTable.Columns)
            {
                dataGridColumns.Add(dataGridColumn);
            }
            DiscTable.Columns.Clear();
            dataGridColumns.Reverse();
            foreach (DataGridColumn dataGridColumn in dataGridColumns)
            {
                DiscTable.Columns.Add(dataGridColumn);
            }
        }
    }
}
